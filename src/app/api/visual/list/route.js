import { v2 as cloudinary } from 'cloudinary'

cloudinary.config({
  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
})

export async function GET() {
  try {
    // ÊêúÁ¥¢ÂõæÁâáÂíåËßÜÈ¢ëÂÜÖÂÆπ
    const [imageResult, videoResult] = await Promise.all([
      cloudinary.search
        .expression('resource_type:image AND folder:visual')
        .with_field('context')
        .with_field('metadata')
        .with_field('tags')
        .with_field('image_metadata')
        .max_results(50)
        .execute(),
      cloudinary.search
        .expression('resource_type:video AND folder:visual')
        .with_field('context')
        .with_field('metadata')
        .with_field('tags')
        .max_results(50)
        .execute()
    ])

    // Ë∞ÉËØïÔºöÊü•ÁúãÁ¨¨‰∏Ä‰∏™ËµÑÊ∫êÁöÑÂÆåÊï¥ÁªìÊûÑ
    if (imageResult.resources.length > 0) {
      console.info('üîç First image resource structure:', JSON.stringify(imageResult.resources[0], null, 2))
    }
    if (videoResult.resources.length > 0) {
      console.info('üîç First video resource structure:', JSON.stringify(videoResult.resources[0], null, 2))
    }

    // Â§ÑÁêÜÂõæÁâá
    const images = imageResult.resources.map((r) => {
      // ‰ªéÂÖÉÊï∞ÊçÆÊàñcontext‰∏≠Ëé∑ÂèñÂàÜÁ±ª‰ø°ÊÅØ
      const categoryData = r.metadata?.category || r.context?.category || ['photograph']
      const category = Array.isArray(categoryData) ? categoryData[0] : categoryData
      
      // Ê†πÊçÆÁî®Êà∑ÁöÑÂàÜÁ±ªÁ≥ªÁªüÊò†Â∞ÑÂà∞ÂâçÁ´ØÂàÜÁ±ª
      let sourceType = 'photography'
      let mediaType = 'image'
      
      if (category === 'ai_photo') {
        sourceType = 'aigc'
        mediaType = 'image'
      } else if (category === 'photograph') {
        sourceType = 'photography'
        mediaType = 'image'
      }

      // Â∞ùËØï‰ªéÂ§ö‰∏™‰ΩçÁΩÆËé∑ÂèñÂÖÉÊï∞ÊçÆ
      const title =
        r.metadata?.title ||
        r.context?.title ||
        r.context?.caption ||
        r.tags?.find((tag) => tag.startsWith('title:'))?.replace('title:', '') ||
        ''
      const description =
        r.metadata?.description ||
        r.context?.description ||
        r.context?.alt ||
        r.tags?.find((tag) => tag.startsWith('desc:'))?.replace('desc:', '') ||
        ''
      const location =
        r.metadata?.location ||
        r.context?.location ||
        r.tags?.find((tag) => tag.startsWith('location:'))?.replace('location:', '') ||
        ''
      const camera =
        r.metadata?.camera ||
        r.context?.camera ||
        r.tags?.find((tag) => tag.startsWith('camera:'))?.replace('camera:', '') ||
        ''

      // Ëé∑ÂèñÊãçÊëÑÊó∂Èó¥ - ‰ªéEXIFÊï∞ÊçÆ‰∏≠ÊèêÂèñ
      let capturedAt = null
      if (r.image_metadata && r.image_metadata.DateTimeOriginal) {
        capturedAt = r.image_metadata.DateTimeOriginal
      } else if (r.image_metadata && r.image_metadata.DateTime) {
        capturedAt = r.image_metadata.DateTime
      } else if (r.image_metadata && r.image_metadata.DateTimeDigitized) {
        capturedAt = r.image_metadata.DateTimeDigitized
      }

      return {
        public_id: r.public_id,
        url: r.secure_url,
        width: r.width,
        height: r.height,
        aspect_ratio: r.width && r.height ? r.width / r.height : 1.5,
        format: r.format,
        created_at: r.created_at,
        folder: r.asset_folder,
        mediaType,
        sourceType,
        category,
        title,
        description,
        location,
        camera,
        capturedAt, // ÊãçÊëÑÊó∂Èó¥
        tags: r.tags || []
      }
    })

    // Â§ÑÁêÜËßÜÈ¢ë
    const videos = videoResult.resources.map((r) => {
      // ‰ªéÂÖÉÊï∞ÊçÆÊàñcontext‰∏≠Ëé∑ÂèñÂàÜÁ±ª‰ø°ÊÅØ
      const categoryData = r.metadata?.category || r.context?.category || ['video']
      const category = Array.isArray(categoryData) ? categoryData[0] : categoryData
      
      // Ê†πÊçÆÁî®Êà∑ÁöÑÂàÜÁ±ªÁ≥ªÁªüÊò†Â∞ÑÂà∞ÂâçÁ´ØÂàÜÁ±ª
      let sourceType = 'photography'
      let mediaType = 'video'
      
      if (category === 'ai_video') {
        sourceType = 'aigc'
        mediaType = 'video'
      } else if (category === 'video' || category === 'photograph') {
        sourceType = 'photography'
        mediaType = 'video'
      }

      // Â∞ùËØï‰ªéÂ§ö‰∏™‰ΩçÁΩÆËé∑ÂèñÂÖÉÊï∞ÊçÆ
      const title =
        r.metadata?.title ||
        r.context?.title ||
        r.context?.caption ||
        r.tags?.find((tag) => tag.startsWith('title:'))?.replace('title:', '') ||
        ''
      const description =
        r.metadata?.description ||
        r.context?.description ||
        r.context?.alt ||
        r.tags?.find((tag) => tag.startsWith('desc:'))?.replace('desc:', '') ||
        ''
      const location =
        r.metadata?.location ||
        r.context?.location ||
        r.tags?.find((tag) => tag.startsWith('location:'))?.replace('location:', '') ||
        ''
      const camera =
        r.metadata?.camera ||
        r.context?.camera ||
        r.tags?.find((tag) => tag.startsWith('camera:'))?.replace('camera:', '') ||
        ''

      return {
        public_id: r.public_id,
        url: r.secure_url,
        width: r.width,
        height: r.height,
        aspect_ratio: r.width && r.height ? r.width / r.height : 16 / 9,
        format: r.format,
        created_at: r.created_at,
        folder: r.asset_folder,
        mediaType,
        sourceType,
        category,
        duration: r.duration,
        title,
        description,
        location,
        camera,
        capturedAt: null, // ËßÜÈ¢ëÊöÇ‰∏çÊîØÊåÅÊãçÊëÑÊó∂Èó¥ÊèêÂèñ
        tags: r.tags || []
      }
    })

    // ÂêàÂπ∂ÊâÄÊúâÂ™í‰ΩìÂÜÖÂÆπ
    const allMedia = [...images, ...videos].sort((a, b) => new Date(b.created_at) - new Date(a.created_at))

    return new Response(JSON.stringify({ ok: true, media: allMedia }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    })
  } catch (e) {
    console.error('‚ùå API Error:', e)
    return new Response(JSON.stringify({ ok: false, error: e.message, stack: e.stack }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
}
